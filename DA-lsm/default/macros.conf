###
# General Macros
#
[hr_duration(1)]
args = field
definition = rex field=$field$ "((?<days>\d+)\+)?(?<hours>\d+):(?<minutes>\d+):(?<seconds>\d+)" | eval $field$=coalesce(days,"0")+"d "+hours+"h "+minutes+"m "+seconds+"s" | fields - days,hours,minutes,seconds

[lsm_existing_indexes]
definition = eventcount summarize=false index=* | dedup index | fields index

[lsm_set_index_internal]
definition = index=_internal
iseval = 0

[lsm_parse_cron(1)]
args = field
definition = rex field=$field$ "(?<min>[^ ]+) (?<hour>[^ ]+) (?<day>[^ ]+) (?<month>[^ ]+) (?<dayofweek>[^ ]+)"\
    | eval now = now()\
    | eval now_hour = strftime(now, "%H"), now_min = strftime(now, "%M"), now_day = strftime(now, "%d"), now_month = strftime(now, "%m"), now_dayofweek = strftime(now, "%w") 

[lsm_now_match_cron_by_part(1)]
args = field
definition = rex field=$field$ "(?<min_$field$>[\d]+)-(?<max_$field$>[\d]+)"\
    | makemv delim="," $field$\
    | eval match_cron_$field$ = if("*"=$field$,"true",if(w=$field$,"true",if(now_$field$ <= max_$field$ AND now_$field$ >= min_$field$, "true", "false")))

[lsm_now_match_cron(1)]
args = field
definition = `lsm_parse_cron($field$)`\
    | `lsm_now_match_cron_by_part(min)`\
    | `lsm_now_match_cron_by_part(hour)`\
    | `lsm_now_match_cron_by_part(day)`\
    | `lsm_now_match_cron_by_part(month)`\
    | `lsm_now_match_cron_by_part(dayofweek)`\
    | eval match_cron = case(match_cron_min=="false","false",match_cron_hour=="false","false",match_cron_day=="false","false",match_cron_month=="false","false",match_cron_dayofweek=="false","false",1==1,"true")\
    | fields - match_cron_min,match_cron_hour,match_cron_day,match_cron_month,match_cron_dayofweek,min,hour,day,month,dayofweek,now,now_*,min_*,max_*

[lsm_should_alarm(1)]
args = field
definition = `lsm_now_match_cron($field$)` | rename match_cron AS should_alarm

###
# Filters
#
[lsm_index_filter]
definition = NOT index IN (malformed,lsm_punct_quality)

[lsm_sourcetype_filter]
definition = NOT sourcetype IN (stash,csv,splunk_config,canary*,fs_notification,search_telemetry,lsm:punct:quality)

###
# Settings
#
[lsm_span]
definition = 1h

[lsm_missing_forwarder_time]
definition = 1m

[lsm_max_index_age]
definition = "1h"

[lsm_default_alarming]
definition = "* 9-17 * * 1-5"

[lsm_event_time_span_secs]
definition = 300

###
# Lookup generators
#
[lsm_generate_existing_indexes]
definition = `lsm_existing_indexes` | eval exists = "true" | outputlookup lsm_existing_indexes

###
# Forwarders
#
[lsm_get_forwarder_tcpin]
definition = `lsm_set_index_internal` sourcetype=splunkd group=tcpin_connections (connectionType=cooked OR connectionType=cookedSSL) fwdType=* guid=*

[lsm_rename_forwarder_type(1)]
args = type
definition = eval $type$ = case($type$ == "full", "Heavy Forwarder", $type$ == "uf", "Universal Forwarder", $type$ == "lwf", "Light Forwarder", 1==1, $type$)

[lsm_eval_forwarder_status]
definition = eval Status = if(isnull(sum_kb) or (sum_kb <= 0) or (last_connected < (info_max_time - 900)), "missing", "active") | fields - sum_kb

[lsm_forwarder_overview]
definition = `lsm_forwarder_overview(1m)`

[lsm_forwarder_overview(1)]
args = earliest
definition = `lsm_get_forwarder_tcpin` hostname=* earliest=-$earliest$\
    | eval source_uri = hostname.":".sourcePort\
    | eval dest_uri = host.":".destPort\
    | eval connection = source_uri."->".dest_uri\
    | eval destination = "-> ".host\
    | stats latest(_time) as _time, values(fwdType) as fwdType, values(sourceIp) as sourceIp, latest(version) as version,  values(os) as os, values(arch) as arch, dc(dest_uri) as dest_count, dc(connection) as connection_count, avg(tcp_KBps) as avg_tcp_kbps, avg(tcp_eps) as avg_tcp_eps, values(destination) as Destinations, sum(kb) as sum_kb by hostname, guid\
    | eval avg_tcp_kbps = round(avg_tcp_kbps, 2)\
    | eval avg_tcp_eps = round(avg_tcp_eps, 2)\
    | `lsm_rename_forwarder_type(fwdType)`\
    | rename hostname as Instance, fwdType as "Forwarder Type", sourceIp as IP, version as "Splunk Version", os as OS, arch as Architecture, guid as GUID, dest_count as "Receiver Count", connection_count as "Connection Count", avg_tcp_kbps as "Average KB/s", avg_tcp_eps as "Average Events/s"\
    | inputlookup append=true lsm_forwarder_assets\
    | dedup GUID,Instance\
    | `lsm_eval_forwarder_status`\
    | outputlookup lsm_forwarder_assets\
    | lookup update=t lsm_zone_lookup ip AS IP OUTPUT zone\
    | rename zone AS Zone\
    | reltime\
    | rename reltime AS "Last seen"\
    | table Instance, Destinations, GUID, "Forwarder Type", IP, Zone, "Splunk Version", OS, Architecture, "Average KB/s", "Average Events/s", "Receiver Count", "Connection Count", "Last seen", Status\
    | sort - Status

###
# Analysing
#
[lsm_analyse_common]
definition = fillnull value=0 events,avg_events,stdev_events\
    | fillnull value=1 lastTime\
    | eval latestTime = relative_time(now(), printf("-%s", maxAge))\
    | eval diff=abs(avg_events-events)\
    | eval prc=if(avg_events==0, "N/A", round(events/avg_events*100,2))\
    | eval status = case(lastTime < latestTime, "outage",\
           diff > maxStDev*stdev_events AND avg_events > events, "underload",\
           diff > maxStDev*stdev_events AND avg_events < events, "overload",\
           1==1, "ok")\
    | eval _time = lastTime\
    | reltime

[lsm_analyse_source(3)]
args = index,host,sourcetype
definition = tstats count AS events where earliest=-30d@h latest=now\
        index="$index$" host="$host$" sourcetype="$sourcetype$" `lsm_index_filter` `lsm_sourcetype_filter`\
        by _time,host,source span=1h\
        | stats avg(events) as avg_events stdev(events) as stdev_events by host,source\
        | sort host,source\
| lookup lsm_source_lookup host,source\
| fillnull value=2h maxAge\
| fillnull value=1 maxStDev\
| join type=left host,source\
    [| tstats count AS events where earliest=-1h\
        index="$index$" host="$host$" sourcetype="$sourcetype$" `lsm_index_filter` `lsm_sourcetype_filter`\
        by _time,host,source span=1h\
        | stats sum(events) as events by host,source\
        | sort host,source]\
| join type=left host,source\
    [| tstats latest(_time) as lastTime where earliest=-30d@h latest=now\
        index="$index$" host="$host$" sourcetype="$sourcetype$" `lsm_index_filter` `lsm_sourcetype_filter`\
        by host,source\
        | sort host,source]\
| `lsm_analyse_common`\
| `lsm_format_monitor_table("host,source")`

[lsm_analyse_sourcetype(1)]
args = index 
definition = tstats count AS events where earliest=-30d@h latest=now\
        index="$index$" `lsm_sourcetype_filter`\
        by _time,index,sourcetype span=1h\
        | stats avg(events) as avg_events stdev(events) as stdev_events by index,sourcetype\
        | sort index,sourcetype\
| lookup lsm_sourcetype_lookup index,sourcetype\
| fillnull value=2h maxAge\
| fillnull value=1 maxStDev\
| join type=left index,sourcetype\
    [| tstats count AS events where earliest=-1h\
        index="$index$" `lsm_sourcetype_filter`\
        by _time,index,sourcetype span=1h\
        | stats sum(events) as events by index,sourcetype\
        | sort index,sourcetype]\
| join type=left index,sourcetype\
    [| tstats latest(_time) as lastTime where earliest=-30d@h latest=now\
        index="$index$" `lsm_sourcetype_filter`\
        by index,sourcetype\
        | sort index,sourcetype]\
| `lsm_analyse_common`\
| `lsm_format_monitor_table("index,sourcetype")`

[lsm_analyse(2)]
args = key1,key2
definition = inputlookup lsm_$key2$_lookup | search `lsm_index_filter` `lsm_sourcetype_filter` | where enabled = "true" | sort $key1$,$key2$\
| join type=left $key1$,$key2$\
    [| tstats count AS events where earliest=-1h `lsm_index_filter` `lsm_sourcetype_filter`\
        [| inputlookup lsm_$key2$_lookup | where enabled = "true" | fields $key1$,$key2$]\
        by _time,$key1$,$key2$ span=1h\
        | stats sum(events) as events by $key1$,$key2$\
        | sort $key1$,$key2$]\
| join type=left $key1$,$key2$\
    [| tstats count AS events where earliest=-30d@h latest=now `lsm_index_filter` `lsm_sourcetype_filter`\
        [| inputlookup lsm_$key2$_lookup | where enabled = "true" | fields $key1$,$key2$]\
        by _time,$key1$,$key2$ span=1h\
        | stats avg(events) as avg_events stdev(events) as stdev_events by $key1$,$key2$\
        | sort $key1$,$key2$]\
| join type=left $key1$,$key2$\
    [| tstats latest(_time) as lastTime where earliest=-30d@h latest=now `lsm_index_filter` `lsm_sourcetype_filter`\
        [| inputlookup lsm_$key2$_lookup | where enabled = "true" | fields $key1$,$key2$]\
        by $key1$,$key2$\
        | sort $key1$,$key2$]\
| `lsm_analyse_common`\
| `lsm_format_monitor_table($key1$","$key2$)`

[lsm_analyse(1)]
args = key1
definition = inputlookup lsm_$key1$_lookup | search `lsm_index_filter` `lsm_sourcetype_filter` | where enabled = "true" | sort $key1$\
| join type=left $key1$\
    [| tstats count AS events where earliest=-1h `lsm_index_filter` `lsm_sourcetype_filter`\
        [| inputlookup lsm_$key1$_lookup | where enabled = "true" | fields $key1$]\
        by _time,$key1$ span=1h\
        | stats sum(events) as events by $key1$\
        | sort $key1$]\
| join type=left $key1$\
    [| tstats count AS events where earliest=-30d@h latest=now `lsm_index_filter` `lsm_sourcetype_filter`\
        [| inputlookup lsm_$key1$_lookup | where enabled = "true" | fields $key1$]\
        by _time,$key1$ span=1h\
        | stats avg(events) as avg_events stdev(events) as stdev_events by $key1$\
        | sort $key1$]\
| join type=left $key1$\
    [| tstats latest(_time) as lastTime where earliest=-30d@h latest=now `lsm_index_filter` `lsm_sourcetype_filter`\
        [| inputlookup lsm_$key1$_lookup | where enabled = "true" | fields $key1$]\
        by $key1$\
        | sort $key1$]\
| `lsm_analyse_common`\
| `lsm_format_monitor_table($key1$)`

[lsm_analyse_indexes]
definition = `lsm_analyse(index)`

[lsm_analyse_hosts]
definition = `lsm_analyse(host)`

# THIS IS NOT WORKING CORRECTLY AND MUST BE REDESIGNED!!
#definition = inputlookup lsm_index_lookup | search `lsm_index_filter` | where enabled = "true" | sort index\
#| join type=left index\
#    [| tstats max(data.total_event_count) as events\
#        where earliest=-1h index=_introspection sourcetype=splunk_disk_objects component=Indexes data.name!=_*\
#        [| inputlookup lsm_index_lookup | search `lsm_index_filter` | where enabled = "true" | fields index | rename index AS data.name]\
#        by _time,data.name span=1h\
#        | rename data.name AS index\
#        | stats max(events) as events by index\
#        | sort index]\
#| join type=left index\
#    [| tstats max(data.total_event_count) as events\
#        where earliest=-30d@h latest=-1h@h index=_introspection sourcetype=splunk_disk_objects component=Indexes data.name!=_*\
#        [| inputlookup lsm_index_lookup | search `lsm_index_filter` | where enabled = "true" | fields index | rename index AS data.name]\
#        by _time,data.name span=1h\
#        | rename data.name AS index\
#        | stats avg(events) as avg_events stdev(events) as stdev_events by index\
#        | sort index]\
#| join type=left index\
#    [| dbinspect index=*\
#        | search [| inputlookup lsm_index_lookup | search `lsm_index_filter` | where enabled = "true" | fields index]\
#        | stats max(endEpoch) as lastTime by index\
#        | sort index]\
#| `lsm_analyse_common`\
#| `lsm_format_monitor_table(index)`

###
# Punct
#
[lsm_update_punct_stats(2)]
args = ind1,ind2
definition = `lsm_index_filter` earliest=-1h | stats count by punct,$ind1$,$ind2$\
    | where punct != ""\
    | fields - count\
    | eval indicator1=$ind1$\
    | eval indicator2=$ind2$\
    | lookup lsm_punct_lookup punct,indicator1,indicator2\
    | eval new = if(isnull(type), "true", "false")\
    | where new = "true"\
    | eval type = "$ind2$"\
    | eval _time = now()\
    | collect addtime=t index=lsm_punct_quality sourcetype=lsm:punct:quality\
    | eval _key = $ind1$.$ind2$.punct\
    | table _key,indicator1,indicator2,type,punct\
    | outputlookup append=t lsm_punct_lookup

###
# Time analysis
#
[lsm_analyse_time]
definition = `lsm_index_filter` `lsm_sourcetype_filter`\
    | convert ctime(_time) as evtTime ctime(_indextime) as idxTime\
    | eval lag=abs(_indextime-_time)\
    | where lag > `lsm_event_time_span_secs`\
    | sort -lag\
    | eval lag=tostring(lag, "duration")\
    | `hr_duration(lag)`\
    | table index sourcetype source evtTime idxTime lag\
    | rename index AS Index sourcetype AS Sourcetype source AS Source evtTime AS "Event Time" idxTime AS "Index Time" lag AS "Time Difference"

###
# Output formatting
#
[lsm_apply_renames_monitor_table]
definition = rename host AS Host,\
    source AS Source,\
    index AS Index, sourcetype AS Sourcetype,\
    status AS Status,\
    reltime AS "Latest Event",\
    avg_events as "Avg Events",\
    events AS "Current Events",\
    stdev_events AS "STDev Events",\
    prc AS "%",\
    diff AS Diff

[lsm_format_monitor_table(1)]
args = keys
definition = eval avg_events=round(avg_events,0)\
    | eval events=round(events,0)\
    | eval stdev_events=round(stdev_events,0)\
    | eval diff=round(diff,0)\
    | table $keys$,status,reltime,avg_events,events,stdev_events,prc,diff\
    | `lsm_apply_renames_monitor_table`

#
# Useful?
#
[lsm_toggle_enabled(2)]
args = host, source
definition = inputlookup lsm_source_lookup | search host="$host$" source="$source$" | eval enabled=if(enabled=="false","true","false") | inputlookup append=t lsm_source_lookup | dedup host,source | outputlookup lsm_source_lookup

