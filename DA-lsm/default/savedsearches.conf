###
# Analyser
#
[lsm_analyse_indexes]
search = | `lsm_analyse_indexes`

[lsm_analyse_hosts]
search = | `lsm_analyse_hosts`

[lsm_analyse_sources]
search = | `lsm_analyse(host,source)`

[lsm_analyse_sourcetypes]
search = | `lsm_analyse(index,sourcetype)`

#[lsm_analyse_indexes]
#search = | dbinspect index=*\
#    | search NOT index=_*\
#    | stats sum(eventCount) as totalCount max(modTime) as recentTime min(startEpoch) as firstTime max(endEpoch) as lastTime by index | convert timeformat="%m/%d/%Y:%H:%M:%S" mktime(recentTime)\
#    | eval expectedLastTime=strftime(relative_time(now(), "-".`lsm_max_index_age`),"%s")\
#    | eval noEventsSince=tostring((now() - lastTime), "duration")\
#    | eval ok=if(lastTime<expectedLastTime, 0, 1)\
#    | table index, lastTime, noEventsSince, ok\
#    | `hr_duration("noEventsSince")`\
#    | convert ctime(firstTime), ctime(lastTime), ctime(recentTime), ctime(expectedLastTime)\
#    | replace 1 WITH "Ok", 0 WITH "Outdated" IN ok\
#    | rename index AS Index, lastTime AS "Last time", noEventsSince AS "No events since", ok AS Status

[lsm_missing_indexes]
search = index=_internal earliest=-30d@d latest=now component=IndexerService log_level=WARN "Received event for unconfigured/disabled/deleted index" | rex "index=(?<missing_index>[^\s]+)" | rex "host=\"host::(?<from_host>[^\"]+)" | rex field=_raw "source=\"source::(?<from_source>[^\"]+)" | stats latest(_time) as _time by missing_index, from_host, from_source | reltime | table _time, from_host, from_source, missing_index, reltime | rename _time AS Timestamp, from_host AS "Source host", from_source AS Source, missing_index AS "Missing index", reltime AS Since | convert ctime(Timestamp) | lookup update=t lsm_existing_indexes index AS "Missing index" | where NOT exists = "true" | fields - exists

###
# Lookup generators
#
[lsm_generate_sources_lookup]
alert.track = 0
cron_schedule = */5 * * * *
enableSched = 0
schedule_window = 5 
search = | inputlookup lsm_source_lookup | table host, source, enabled, maxAge, maxStDev, alarming | append [| tstats count as events\
    where `lsm_index_filter` `lsm_sourcetype_filter`\
    by host,source | table host, source, enabled, maxAge, maxStDev, alarming] | dedup host,source\
    | eval enabled=coalesce(enabled,"true")\
    | eval maxAge=coalesce(maxAge,"2h")\
    | eval maxStDev=coalesce(maxStDev,1)\
    | eval alarming=coalesce(alarming,`lsm_default_alarming`)\
    | outputlookup lsm_source_lookup

[lsm_generate_sourcetypes_lookup]
alert.track = 0
cron_schedule = */5 * * * *
enableSched = 1
schedule_window = 5 
search = | inputlookup lsm_sourcetype_lookup | table index, sourcetype, enabled, maxAge, maxStDev, alarming | append [| tstats count as events\
    where `lsm_index_filter` `lsm_sourcetype_filter`\
    by index,sourcetype | table index, sourcetype, enabled, maxAge, maxStDev, alarming] | dedup index,sourcetype\
    | eval enabled=coalesce(enabled,"true")\
    | eval maxAge=coalesce(maxAge,"2h")\
    | eval maxStDev=coalesce(maxStDev,1)\
    | eval alarming=coalesce(alarming,`lsm_default_alarming`)\
    | outputlookup lsm_sourcetype_lookup

[lsm_generate_index_lookup]
alert.track = 0
cron_schedule = */5 * * * *
enableSched = 1
schedule_window = 5 
search = | inputlookup lsm_index_lookup | table index, enabled, maxAge, maxStDev, alarming | append [| `lsm_existing_indexes`\
    | search `lsm_index_filter`] | dedup index\
    | eval enabled=coalesce(enabled,"true")\
    | eval maxAge=coalesce(maxAge,"2h")\
    | eval maxStDev=coalesce(maxStDev,1)\
    | eval alarming=coalesce(alarming,`lsm_default_alarming`)\
    | outputlookup lsm_index_lookup

[lsm_generate_host_lookup]
alert.track = 0
cron_schedule = */5 * * * *
enableSched = 1
schedule_window = 5 
search = | inputlookup lsm_host_lookup | table host, enabled, maxAge, maxStDev, alarming | append [| tstats count as events\
    where `lsm_index_filter` `lsm_sourcetype_filter`\
    by host | table host, enabled, maxAge, maxStDev, alarming] | dedup host\
    | eval enabled=coalesce(enabled,"true")\
    | eval maxAge=coalesce(maxAge,"2h")\
    | eval maxStDev=coalesce(maxStDev,1)\
    | eval alarming=coalesce(alarming,`lsm_default_alarming`)\
    | outputlookup lsm_host_lookup

[lsm_generate_forwarder_assets]
search = `lsm_forwarder_overview(30d@d)`

[lsm_forwarder_overview]
search = `lsm_forwarder_overview`

[lsm_generate_existing_indexes]
alert.track = 0
cron_schedule = */5 * * * *
enableSched = 1
schedule_window = 5 
search = | `lsm_generate_existing_indexes`

#[lsm_generate_source_puncts_lookup]
#search = `lsm_index_filter` | stats count by punct,source\
#    | eval type="source"\
#    | eval _key=source.punct\
#    | where punct!=""\
#    | rename source AS indicator\
#    | table _key,indicator,type,punct\
#    | outputlookup lsm_punct_lookup

#[lsm_generate_sourcetype_puncts_lookup]
#search = `lsm_index_filter` | stats count by punct,sourcetype\
#    | eval type="sourcetype"\
#    | eval _key=sourcetype.punct\
#    | where punct!=""\
#    | rename sourcetype AS indicator\
#    | table _key,indicator,type,punct\
#    | outputlookup lsm_punct_lookup

[lsm_update_source_punct_stats]
alert.track = 0
cron_schedule = */5 * * * *
enableSched = 1
schedule_window = 5 
search = `lsm_update_punct_stats(host,source)`

[lsm_update_sourcetype_punct_stats]
alert.track = 0
cron_schedule = */5 * * * *
enableSched = 1
schedule_window = 5 
search = `lsm_update_punct_stats(index,sourcetype)`

###
# Alerts
#
[lsm_alert_sourcetypes]
action.email = 1
action.email.message.alert = Because you are responsible for the application $result.application$ you get this message that one ore more sourcetypes of your application are invalid.
action.email.sendpdf = 1
action.email.sendresults = 1
action.email.subject = Log-Source_monitoring Alert: $result.Sourcetype$ ($result.Status$)
action.email.to = $result.responsible$
action.lookup = 0
alert.expires = 48h
alert.suppress.period = 24h
action.lookup = 1
action.lookup.append = 1
action.lookup.filename = lsm_triggered_alerts.csv
alert.suppress = 0
alert.digest_mode = 0
alert.expires = 30m
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = Index,Sourcetype
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = DA-lsm
request.ui_dispatch_view = search
search = | `lsm_analyse(index,sourcetype)`\
    | where Status != "ok"\
    | lookup lsm_sourcetype_lookup index AS Index,sourcetype AS Sourcetype output alarming\
    | `lsm_should_alarm(alarming)`\
    | where should_alarm = "true"\
    | fields - should_alarm,alarming\
    | eval type = "sourcetype"\
    | lookup update=t lsm_application_lookup indicator AS Sourcetype,type output application\
    | lookup update=t lsm_application_responsible_lookup application\
    | eval responsible = mvjoin(responsible,",")\
    | fields - type
